{"meta":{"title":"timcui's-Blog","subtitle":"","description":"","author":"timcui","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"【nginx】nginx配置-Linux","slug":"【nginx】nginx配置-Linux","date":"2021-11-14T08:53:21.000Z","updated":"2021-11-14T10:10:15.465Z","comments":true,"path":"2021/11/14/【nginx】nginx配置-Linux/","link":"","permalink":"http://example.com/2021/11/14/%E3%80%90nginx%E3%80%91nginx%E9%85%8D%E7%BD%AE-Linux/","excerpt":"","text":"","categories":[{"name":"nginx","slug":"nginx","permalink":"http://example.com/categories/nginx/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"},{"name":"nginx","slug":"nginx","permalink":"http://example.com/tags/nginx/"}]},{"title":"【nginx】nginx配置-Windows","slug":"【nginx】nginx配置-Windows","date":"2021-11-14T08:50:42.000Z","updated":"2021-11-14T10:10:33.148Z","comments":true,"path":"2021/11/14/【nginx】nginx配置-Windows/","link":"","permalink":"http://example.com/2021/11/14/%E3%80%90nginx%E3%80%91nginx%E9%85%8D%E7%BD%AE-Windows/","excerpt":"","text":"","categories":[{"name":"nginx","slug":"nginx","permalink":"http://example.com/categories/nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://example.com/tags/nginx/"}]},{"title":"【mysql】centos 安装mysql","slug":"【MySQL】centos 安装mysql","date":"2021-01-08T14:45:47.766Z","updated":"2021-11-14T10:16:01.272Z","comments":true,"path":"2021/01/08/【MySQL】centos 安装mysql/","link":"","permalink":"http://example.com/2021/01/08/%E3%80%90MySQL%E3%80%91centos%20%E5%AE%89%E8%A3%85mysql/","excerpt":"","text":"mysql是我们最常用的开源的关系型数据库，mysql不同版本有时候安装的方式也不尽相同，下面以mysql5.7.28版本为例梳理一下安装细节： 1.下载mysql-5.7.28，URL：https://downloads.mysql.com/archives/community/ 我这里下载的是64位版本 下载后文件为：mysql-5.7.28-linux-glibc2.12-x86_64.tar.gz \\2. 卸载自带的mariadb和mysql 检查是否安装了mariadb和mysql，有时候默认安装了 12rpm -qa | grep mariadbrpm -qa | grep mysql 如果没有，就可以安装mysql，如果有，需要先卸载（remove后为上面命令查询到的内容，全文件名，我这里没有，没法展示） 1yum remove mariadb-xxx 3.解压文件，修改目录名方便配置 123tar -zxvf mysql-5.7.28-linux-glibc2.12-x86_64.tar.gz -C &#x2F;opt&#x2F;soft&#x2F;cd &#x2F;opt&#x2F;softmv mysql-5.7.28-linux-glibc2.12-x86_64 mysql-5.7.28 4.在/usr/local/目录下创建到/opt/soft/mysql-5.7.28的软链接 12cd &#x2F;usr&#x2F;localln -s &#x2F;opt&#x2F;soft&#x2F;mysql-5.7.28 mysql 5.添加mysql用户，修改mysql目录权限，并用此用户执行应用 123useradd -s &#x2F;bin&#x2F;false -M mysqlcd &#x2F;opt&#x2F;softchown -R mysql:mysql mysql-5.7.28 6.拷贝配置文件，将mysql的配置文件拷贝为/etc/目录下的my.cnf，并修改配置文件 123456789101112131415161718192021vim &#x2F;etc&#x2F;my.cnf[mysqld]# binlog 配置log-bin&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;logs&#x2F;mysql-bin.logexpire-logs-days&#x3D;14max-binlog-size&#x3D;500Mserver-id&#x3D;1# GENERALbasedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysqldatadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;datasocket&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;mysql.sockuser&#x3D;mysqldefault-storage-engine&#x3D;InnoDBcharacter-set-server&#x3D;utf8lower_case_table_names &#x3D; 1explicit_defaults_for_timestamp&#x3D;true[mysqld_safe]log-error&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;mysql-error.logpid-file&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;mysqld.pid[client]socket&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;mysql.sock[mysql]default-character-set&#x3D;utf8socket&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;mysql.sock 7.安装mysql，进入mysql目录执行以下命令 12cd &#x2F;opt&#x2F;soft&#x2F;mysql-5.7.28bin&#x2F;mysqld --initialize --user&#x3D;mysql --basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql --datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data 如果出现如下错误，说明需要安装依赖包： 安装autoconf依赖包： 1yum -y install autoconf 再次执行脚本 如果出现以下错误，说明在my.cnf中指定的binlog配置文件的logs文件夹不存在： 在/usr/local/mysql/下创建logs文件夹就行了，并改为mysql用户 再次执行脚本 出现以下信息，代表成功，要保存一下密码， 8.拷贝启动程序，将mysql的启动程序拷贝到/etc/init.d/目录下 1cp &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;support-files&#x2F;mysql.server &#x2F;etc&#x2F;init.d&#x2F;mysqld 9.安装完，启动mysql服务 1service mysqld start 如果出现如下错误： 123[root@s144 support-files]# service mysqld startStarting MySQL.2020-01-31T23:14:27.412533Z mysqld_safe error: log-error set to &#39;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;mysql-error.log&#39;, however file don&#39;t exists. Create writable for user &#39;mysql&#39;. ERROR! The server quit without updating PID file (&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;s144.pid). 说明mysql-error.log不存在，手动去创建，并修改权限 123cd &#x2F;opt&#x2F;soft&#x2F;mysql-5.7.28touch mysql-error.logchown mysql:mysql mysql-error.log 出现SUCCESS，说明启动成功 10.配置环境变量，编辑/etc/profile，方便在任何地方用mysql命令 1vim &#x2F;etc&#x2F;profile #mysqlexport MYSQL_HOME=/usr/local/mysqlexport PATH=$PATH:$MYSQL_HOME/bin 别忘记重新编译 /etc/profile 1source &#x2F;etc&#x2F;profile 11.登录mysql，修改密码 首次登录没有密码，提示输入密码时，输入第7步安装时生成的密码：p5j2jfX7am.h 1mysql -uroot -p 这里要先使用alter user重置密码，不然会报错，我这里 修改mysql root用户密码 为 111111 ： 12mysql&gt; alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;111111&#39;;mysql&gt; flush privileges; 至此本机登录密码修改完成，若是想让其他机器访问，需要配置远程访问： 1GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;111111&#39; WITH GRANT OPTION; 使用远程工具测试一下： 至此搭建mysql-5.7.28版本就完成了 12.一些常用命令 1234service mysqld start #启动service mysqld stop #关闭 service mysqld restart #重启 service mysqld status #查看运行状态","categories":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/categories/Linux/"},{"name":"MySQL","slug":"Linux/MySQL","permalink":"http://example.com/categories/Linux/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://example.com/tags/MySQL/"},{"name":"CentOS","slug":"CentOS","permalink":"http://example.com/tags/CentOS/"}]},{"title":"【linux】不存在sudoer","slug":"【Linux】不存在sudoer","date":"2021-01-08T14:31:44.415Z","updated":"2021-11-14T10:15:09.151Z","comments":true,"path":"2021/01/08/【Linux】不存在sudoer/","link":"","permalink":"http://example.com/2021/01/08/%E3%80%90Linux%E3%80%91%E4%B8%8D%E5%AD%98%E5%9C%A8sudoer/","excerpt":"","text":"用户 不在 sudoers 文件中。此事将被报告。 普通linux用户使用sudo命令执行只有root用户才可以执行的命令时出现了该错误，如下图示： 简单说明一下操作。命令$ ll /etc/sudoers表示查看文件的属性，属性包括有：文件拥有者、文件所属组以及其他用户组对该文件拥有的读写权限和文件的类型等，上图的/etc/sudoers文件表示拥有者和所属组都是root且只能读取，其他用户组的没有任何读写权限。 命令$ sudo cat /etc/sudoers表示当前登录用户是普通用户zouqi，我想使用该用户查看/etc/sudoers文件的内容，由于需要有root权限才能查看该文件的内容，于是使用sudo命令来让普通用户临时拥有root权限来执行查看内容命令，但是后面输入密码后发现命令无法成功执行（查看失败了），报错标题所诉zouqi 不在 sudoers 文件中。此事将被报告。错误。 解决方案根据错误提示，只需将当前登录用户，图中所示用户是zouqi加入到sudoers文件中即可。 切换至root用户$ su - root 给root用户添加可写权限chmod 640 /etc/sudoers 修改sudoers文件 1# vim /etc/sudoers 如上图所示位置加上zouqi ALL=(ALL) ALL后，按下esc键，输入:wq保存修改并退出编辑。 查看是否修改成功 1# cat /etc/sudoers 可以看到已经成功添加了用户zouqi到sudoers文件中。 修改sudoers文件：只读权限（原有权限） 1chmod 440 /etc/sudoers 普通用户继续使用sudo命令验证 exitexit表示返回普通用户zouqi 1sudo cat /etc/sudoers sudo命令继续查看sudoers文件内容验证结果。如下图示： 根据图示可知问题已经解决。","categories":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"},{"name":"auther","slug":"auther","permalink":"http://example.com/tags/auther/"},{"name":"sudoer","slug":"sudoer","permalink":"http://example.com/tags/sudoer/"}]},{"title":"【liunx】centos防火墙","slug":"【Linux】centos防火墙","date":"2021-01-08T14:31:15.522Z","updated":"2021-11-14T10:07:54.810Z","comments":true,"path":"2021/01/08/【Linux】centos防火墙/","link":"","permalink":"http://example.com/2021/01/08/%E3%80%90Linux%E3%80%91centos%E9%98%B2%E7%81%AB%E5%A2%99/","excerpt":"","text":"一、centos7以上版本123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263641.firewalld的基本使用启动： systemctl start firewalld查状态：systemctl status firewalld 停止： systemctl disable firewalld禁用： systemctl stop firewalld在开机时启用一个服务：systemctl enable firewalld.service在开机时禁用一个服务：systemctl disable firewalld.service查看服务是否开机启动：systemctl is-enabled firewalld.service查看已启动的服务列表：systemctl list-unit-files|grep enabled查看启动失败的服务列表：systemctl --failed2.配置firewalld-cmd查看版本： firewall-cmd --version查看帮助： firewall-cmd --help显示状态： firewall-cmd --state查看所有打开的端口： firewall-cmd --zone=public --list-ports更新防火墙规则： firewall-cmd --reload查看区域信息: firewall-cmd --get-active-zones查看指定接口所属区域： firewall-cmd --get-zone-of-interface=eth0拒绝所有包：firewall-cmd --panic-on取消拒绝状态： firewall-cmd --panic-off查看是否拒绝： firewall-cmd --query-panic3.那怎么开启一个端口呢添加firewall-cmd --zone=public(作用域) --add-port=80/tcp(端口和访问类型) --permanent(永久生效)firewall-cmd --zone=public --add-service=http --permanentfirewall-cmd --reload # 重新载入，更新防火墙规则firewall-cmd --zone= public --query-port=80/tcp #查看firewall-cmd --zone= public --remove-port=80/tcp --permanent # 删除firewall-cmd --list-servicesfirewall-cmd --get-servicesfirewall-cmd --add-service=&lt;service&gt;firewall-cmd --delete-service=&lt;service&gt;在每次修改端口和服务后/etc/firewalld/zones/public.xml文件就会被修改,所以也可以在文件中之间修改,然后重新加载使用命令实际也是在修改文件，需要重新加载才能生效。firewall-cmd --zone=public --query-port=80/tcpfirewall-cmd --zone=public --query-port=8080/tcpfirewall-cmd --zone=public --query-port=3306/tcpfirewall-cmd --zone=public --add-port=8080/tcp --permanentfirewall-cmd --zone=public --add-port=3306/tcp --permanentfirewall-cmd --zone=public --query-port=3306/tcpfirewall-cmd --zone=public --query-port=8080/tcpfirewall-cmd --reload # 重新加载后才能生效firewall-cmd --zone=public --query-port=3306/tcpfirewall-cmd --zone=public --query-port=8080/tcp4.参数解释–add-service #添加的服务–zone #作用域–add-port=80/tcp #添加端口，格式为：端口/通讯协议–permanent #永久生效，没有此参数重启后失效5.详细使用firewall-cmd --permanent --zone=public --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;192.168.0.4/24&quot; service name=&quot;http&quot; accept&#x27; //设置某个ip访问某个服务firewall-cmd --permanent --zone=public --remove-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;192.168.0.4/24&quot; service name=&quot;http&quot; accept&#x27; //删除配置firewall-cmd --permanent --add-rich-rule &#x27;rule family=ipv4 source address=192.168.0.1/2 port port=80 protocol=tcp accept&#x27; //设置某个ip访问某个端口firewall-cmd --permanent --remove-rich-rule &#x27;rule family=ipv4 source address=192.168.0.1/2 port port=80 protocol=tcp accept&#x27; //删除配置firewall-cmd --query-masquerade # 检查是否允许伪装IPfirewall-cmd --add-masquerade # 允许防火墙伪装IPfirewall-cmd --remove-masquerade # 禁止防火墙伪装IPfirewall-cmd --add-forward-port=port=80:proto=tcp:toport=8080 # 将80端口的流量转发至8080firewall-cmd --add-forward-port=proto=80:proto=tcp:toaddr=192.168.1.0.1 # 将80端口的流量转发至192.168.0.1firewall-cmd --add-forward-port=proto=80:proto=tcp:toaddr=192.168.0.1:toport=8080 # 将80端口的流量转发至192.168.0.1的8080端口 二、centos7以下版本1234567891011121314151.开放80，22，8080 端口/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT/sbin/iptables -I INPUT -p tcp --dport 22 -j ACCEPT/sbin/iptables -I INPUT -p tcp --dport 8080 -j ACCEPT2.保存/etc/rc.d/init.d/iptables save3.查看打开的端口/etc/init.d/iptables status4.关闭防火墙 1） 永久性生效，重启后不会复原开启： chkconfig iptables on关闭： chkconfig iptables off2） 即时生效，重启后复原开启： service iptables start关闭： service iptables stop","categories":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/categories/Linux/"}],"tags":[{"name":"fireawall","slug":"fireawall","permalink":"http://example.com/tags/fireawall/"},{"name":"centos","slug":"centos","permalink":"http://example.com/tags/centos/"},{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"【mysql】MySQL创建用户","slug":"【MySQL】MySQL创建用户","date":"2021-01-08T14:30:13.803Z","updated":"2021-11-14T10:16:09.569Z","comments":true,"path":"2021/01/08/【MySQL】MySQL创建用户/","link":"","permalink":"http://example.com/2021/01/08/%E3%80%90MySQL%E3%80%91MySQL%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657### 一. 创建用户命令:CREATE USER &#x27;username&#x27;@&#x27;host&#x27; IDENTIFIED BY &#x27;password&#x27;;说明：username：你将创建的用户名host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符%password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器例子：CREATE USER &#x27;dog&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;;CREATE USER &#x27;pig&#x27;@&#x27;192.168.1.101_&#x27; IDENDIFIED BY &#x27;123456&#x27;;CREATE USER &#x27;pig&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;CREATE USER &#x27;pig&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;&#x27;;CREATE USER &#x27;pig&#x27;@&#x27;%&#x27;;### 二. 授权:命令:GRANT privileges ON databasename.tablename TO &#x27;username&#x27;@&#x27;host&#x27;说明:privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALLdatabasename：数据库名tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用*表示，如*.*例子:GRANT SELECT, INSERT ON test.user TO &#x27;pig&#x27;@&#x27;%&#x27;;GRANT ALL ON *.* TO &#x27;pig&#x27;@&#x27;%&#x27;;GRANT ALL ON maindataplus.* TO &#x27;pig&#x27;@&#x27;%&#x27;;注意:用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令:GRANT privileges ON databasename.tablename TO &#x27;username&#x27;@&#x27;host&#x27; WITH GRANT OPTION;### 三.设置与更改用户密码命令:SET PASSWORD FOR &#x27;username&#x27;@&#x27;host&#x27; = PASSWORD(&#x27;newpassword&#x27;);如果是当前登陆用户用:SET PASSWORD = PASSWORD(&quot;newpassword&quot;);例子:SET PASSWORD FOR &#x27;pig&#x27;@&#x27;%&#x27; = PASSWORD(&quot;123456&quot;);### 四. 撤销用户权限命令:REVOKE privilege ON databasename.tablename FROM &#x27;username&#x27;@&#x27;host&#x27;;说明:privilege, databasename, tablename：同授权部分例子:REVOKE SELECT ON *.* FROM &#x27;pig&#x27;@&#x27;%&#x27;;注意:假如你在给用户&#x27;pig&#x27;@&#x27;%&#x27;授权的时候是这样的（或类似的）：GRANT SELECT ON test.user TO &#x27;pig&#x27;@&#x27;%&#x27;，则在使用REVOKE SELECT ON *.* FROM &#x27;pig&#x27;@&#x27;%&#x27;;命令并不能撤销该用户对test数据库中user表的SELECT 操作。相反，如果授权使用的是GRANT SELECT ON *.* TO &#x27;pig&#x27;@&#x27;%&#x27;;则REVOKE SELECT ON test.user FROM &#x27;pig&#x27;@&#x27;%&#x27;;命令也不能撤销该用户对test数据库中user表的Select权限。具体信息可以用命令SHOW GRANTS FOR &#x27;pig&#x27;@&#x27;%&#x27;; 查看。### 五.删除用户命令:DROP USER &#x27;username&#x27;@&#x27;host&#x27;;","categories":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/categories/Linux/"},{"name":"MySQL","slug":"Linux/MySQL","permalink":"http://example.com/categories/Linux/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://example.com/tags/MySQL/"}]},{"title":"【Java】About 注解","slug":"【Java】注解","date":"2021-01-08T14:28:59.363Z","updated":"2021-11-14T09:44:55.570Z","comments":true,"path":"2021/01/08/【Java】注解/","link":"","permalink":"http://example.com/2021/01/08/%E3%80%90Java%E3%80%91%E6%B3%A8%E8%A7%A3/","excerpt":"","text":"什么是注解？ 我们学习注解的第一步，首先就是先从最基本的开始，看看注解到底是什么？ 注解和反射是Java中非常让人容易忽略的东西，但却很重要，在主流的Spring中更是充满了注解，注解和注释很像，两者其实本质就差不多，注释是给我们程序员看的，而注解呢其实就是给程序看的(关于反射，下一篇咱就开讲) 上面所说希望你着重注意以下两点： 1、注解和注释很像 2、注释是给我们程序员看的，而注解呢其实就是给程序看的 我们初步理解注解就从上面两点开始，我们先看注释，比如这样： 这就是一个注释，那么注释有什么用呢？简单来说就是对相关的类或者方法加以说明，比如这里的Test类，上面的注释大致告诉我们这类是谁编写的，做什么的以及何时编写的这些信息，当然，信息其实还可以有更多。 所以，你要明白，注释是干嘛的，是给我们这些程序员看的，看到注释我们就明白了，哦，这个类原来是这样的…… 注释是给程序员看的，那么注解呢？相差一个字，注解是给程序看的，先记住即可。 进一步理解注解 上面我们说了，注解和注释是很像的，注释是给我们人看的，注解就是给程序看的，前面的好理解，这个注解是给程序看的，你或许还有一点懵，我进一步解释下。 首先，直观感觉下什么是注解，比如我们在代码中写的这个： 1234567891011/** * @Description 用户类 * @Author ithuangqing * @Date 2020-07-31 15:33 **/@Repositorypublic class UserBean &#123; private String name; private int age;&#125;12345678910 这里的@Repository就是一个注解，看这段代码，上面还有注释，我们看到注释，发现都看得明白，但是看到@Repository之后，就不那么明白，这是啥，有啥用？ 于是我们查，大概知道，哦，这是个注解，有了这个注解，UserBean就会被装载进Spring容器中，我们可以知道这些信息，但是，它实际上做了哪些事情，是如何起作用，也就是如何把UserBean交给Spring去处理的，这个内部实现，我们不清楚。 但是，我们虽然不清楚，有个东西它清楚，什么呢？就是一个特定的程序，也就是说，有一个专门的程序，当它看到这个UserBean上面有一个@Repository之后，这个程序就知道了，原来要把这个UserBean装载进Spring容器中，于是这个程序员就开始执行一系列的操作区把这个UserBean装载进Spring容器中。 所以，你到此应该明白： 注释是给人看到的，注解是给程序看的。 我们再进一步总结下什么是注解： 在程序中，可以把注解看成一种特殊的标记，一般是用来标记类，方法或者接口等，这些标记有一些特点，比如可以在编译的时候，（javac命令把java源文件编译成字节码文件class），类加载和运行的时候（使用java命令执行字节码文件的时候，类的生命周期开始，从加载到卸载）被读取到（一般是有专门的程序去读区这些注解，利用反射技术去解析注解，然后根据得到的信息做相应的处理） 是的，关于注解，你要知道这么一个知识点了： 对于注解，是有专门的程序去读取它，解析它，然后根据得到的消息去执行相应的操作。 关于这个程序，要看具体的场景，也就是说这个程序是不同的，那么关于这个程序怎么知道读到哪个注解该干嘛，这个还是依靠注解本身的定义，比如@Repository注解被定义成是把被注解的装载进Spring容器中，那么特有的程序获取到这个注解就知道该干什么事了。 到此，你应该知道什么是注解了，当然，是概念上的一些东西，另外，对注解是怎么起作用的，你也应该有点内味了…… 注解的简单分类 这个知识点很是轻松愉快，不需要你失去多少脑细胞。 注解是有分类的，一般有三种类型的注解： 自定义注解（实际很少） JDK内置注解（@Override检验方法重写） 框架中的注解 不知道这个能不能理解，就是说，对于注解而言，是有几种不同分类的，首先，我们可以自己写一个注解出来（下面会讲），另外对于JDK本身而言有自己的的注解，我们看个代码，你就知道了： 比如这个，是重写toString方法，上面就有个JDK的内置注解@Override，这个注解就起到一个检验的作用，因为它是Object的方法，你现在要重写它，那么名字啊，参数啊要和之前的一样，不一样，就给你报错，不信你试试： 这个是关于JDK的内置注解，那么最后一个关于框架的注解，我想你只要学过Spring都知道，比如@Controller，熟悉吧，这就是框架中的注解。 注解的本质经过上面的讲解，我们应该大致了解了什么是注解，以及注解的一些分类，现在，我们对于概念上的注解算是清楚了，但是这个注解本质是个什么呢？ 告诉你吧，注解的本质是个接口，为啥，先来看下，如何定义一个注解（下面会详细讲解） 123public @interface Main &#123;&#125;12 就这些，就定义了一个注解，不知道你发现了没，这个和接口很像啊，有啥区别，就是多了一个@，不然就是接口啊，接下来我们使用XJad把这个注解反编译一下看看： 看到没，这里的Main直接就是interface定义，然后还继承了Annotation，这个足以说明，注解其实就是接口啊。 这个暂且聊到这，记住即可！ 如何定义注解接下来我们就来聊聊如何去自定义一个注解，我们在上面说过，注解的本质其实就是接口，上面也简单演示了一个注解的定义，如下： 123public @interface Main &#123;&#125;12 想一下，我们平常怎么定义一个接口，是不是使用关键字interface，那么类呢？是不是使用class关键字，也就是说啊，定义这些一般都是需要一个关键字来加以声明的，显而易见，定义注解的关键字就是@interface，它和接口的定义就是多了一个@，但是注解的定义却不仅仅是如此！ 元注解这里要引入一个元注解的概念，我们先来想一下，注解我们上面说了，一般可以用来标记类，接口或者方法等，那么这里就有一个问题了，比如我定义了这么一个Main注解： 123public @interface Main &#123;&#125;12 那么，我这个注解是不是可以用在类上，也可以用在接口或者方法上？一般类呀，接口啊，方法啊等等它们还是有点差别的，所以对于这些最好有区分，也就是说，有些注解只能标记类，有些注解只能标记方法等，这样一来就需要对注解的作用域去进行限制。 那么这个该怎么搞，答案就是元注解，那什么是元注解呢？ 元注解就是标记注解的注解 啥意思，来看下，比如我们定义的这个Main注解，我们规定它只能用来标记方法，那么可以这样做： 我们在上面加了一个注解@Target，后面还有参数（下面会讲），这个参数ElementType.METHOD就代表我们这个注解是用于注解方法的，来，试一下： 你看，可以用在我们的main方法上，那么是不是不能用于类呢？我们试下： 报错了，看来是不行，所以这个@Target就是一个元注解，可以用来注解注解，也就是标记注解的注解。 关于元注解，一般有以下主要的几个： @Documented 用于制作文档 @Target 指定注解的使用位置，不指定的话任何位置都可以使用 @Retention（注解的保留策略） 这里单独提一下最后一个也就是声明注解的保留策略@Retention，这个是什么意思呢？ 这个保留策略啊，简单来讲就是说你这个注解可以在哪个时间段起作用，这个就得说说我们的代码从写出来，然后编译到执行的主要三个阶段了，画个图就是这样的： 这个我已经画的很清楚了吧，一般来说，我们的注解都是要保留到运行期间的，所以一般就是这样： 当然，具体情况具体对待。 到这里你可能发现，这个注解里面可以有参数？当然是可以的，我这里简单演示下，下面讲到注解的语法的时候你就知道了： 然后再看下使用： 其实还是蛮简单的！ 注解的基本使用语法接下来我们就来看看注解的语法吧，就是注解具体是如何使用的。 对于注解，我们知道了如何去定义它，比如简单定义一个注解： 这很简单，我们继续去看，对于注解还可以定义属性： 虽然这个属性看起来很像方法，但是人家就是属性，注解还是比较特殊的，那么现在我们来使用下这个注解： 这个时候它会报错，告诉我们需要一个value值，其实也好理解，你的注解定义中定义的有一个value属性，那么你在使用的时候就需要把这个属性值给用上，那你说我可不可以不用，可以的，那定义注解属性的时候就需要给属性添加默认值，就是这样： 可以设置成一个空字符串也可以设置成具体的值。除此之外我们还可以设置多个属性值，像这样： 这里就有知识点了，如果你在使用的时候只是给一个属性值赋值，那么在使用的时候可以这样： 那有人可能疑问，我这个hello对应的是value还是name啊，默认对应的都是value，所以这个要牢记。 但是给多个属性值赋值的时候就必须指明具体的属性名称了，就是这样： PS：通过上面的介绍我们会发现注解一个比较奇怪的地方，就是对于注解而言，我们可以定义属性，但是注解的属性长得真的像方法，但是在注解里面，它就是属性，就可以直接赋值，这里需要注意下！ 属性的类型上面简单介绍了注解的属性，那么这些属性都是可以取哪些类型值呢？大致有如下这么多： 基本数据类型 String 枚举 Class 注解类型 数组（以上类型的一维数组） 关于数组的看个例子，比如这样： 使用的时候也是同样的道理： 如何真正的理解注解我们平常对于注解之所以忽视的原因在于，很多地方只需要我们去使用，比如这样： 至于注解是怎么定义的以及注解是怎么起作用的都不太了解，好像需要我们自定义注解的也都很少，所以不去系统化的学习注解的话，会忽略掉注解的很多东西，只会使用，也就是@XXX 那么，从今天开始，我希望你能够记住，对于注解而言，它一定有如下三个流程： 定义注解 使用注解 读取并执行相应流程 下面我们就以@Repository这个注解来看看这三个流程，首先是定义注解，这个我们可以在IDEA中按住Ctrl点进去@Repository来看，是这样的： ](http://www.ithuangqing.vip/wp-content/uploads/2020/07/wp_editor_md_4185e9864c1c7fc41fb1173d6526a9df.jpg) 这个就是@Repository注解的定义，接着我们看看@Repository的使用： 然后就是对注解的读取了，怎么读取呢？很多人对这块是比较模糊的，这也是对注解理解最大的障碍所在。 我们一般就是使用注解，对于注解的定义和读取这块一般都是框架什么的给我们搞定了，我们不看源码一般不知道是怎么回事的，也就不清楚注解到底是怎么运行起来的，简单的理解就是注解需要靠反射去读取，然后做相应的处理。 但是我想你一定和我一样好奇，为啥加了个@Repository注解之后，这个UserBean就被装载进Sring容器中生成了一个bean呢？ 还记得我在最开始就一直在说的吗？注解是需要有专门的程序取读取的，然后根绝读取到的注解获取的信息去执行相应的操作。 所以这里，在Spring源码中，一定有某个或者某些程序在做这个事情。 注解的读取（注解如何起作用）上面说了注解的定义何使用，在这里单独把注解的读取拿出来说下，因为这点事理解注解的重点，很多人觉得对注解不理解的一个原因就在于不清楚加了个注解之后到底干了啥？ 也就是注解到底是如何起作用的？搞明白这个，将对你理解注解有极大的帮助。 注解主要被反射读取对于注解的读取，一般就是通过反射技术来实现，这里就有知识点了，对于反射而言，它只能读取内存中的字节码信息，然后还记得之前我们说的注解的作用域@Target吗？ 它里面有几个主要的作用域，也就是这张图片，再来回顾下： 对于RetentionPolicy.CLASS而言，这个就是指的字节码这一阶段，这个时候这个字节码文件是由Java源文件通过javac编译生成，这个时候class字节码文件其实还是在磁盘内，并没有进入内存中。 而反射只能取读取内存中的字节码信息，所以注解的保留策略也就是这个@Target只能是RUNTIME，也即运行的时候仍然可以读取。 我的理解（精华）很多人对注解不理解，或者觉得很模糊的一个原因就是你让我定义一个注解，我也能按照基本的注解语法去定义一个注解，你说怎么使用注解我也知道在类，方法等上面使用 @+注解名称的方式，但是也就到此为主了，更进一步的理解就有点模糊了，比如： 为什么要这样用？ 原理是什么，怎么起作用的？ 你想啊，我们就这样在类或者方法上面写了这么一个@+注解名称就行了？后续是怎么起作用的呢？这里你得首先清楚，注解有三大步骤： 定义注解 使用注解 读取注解（这块是大部分人缺少的，也是大部分人对注解不理解的关键所在） 再理解下什么是注解，与注释一字之差，肯定有相似之处，两者都是提供额外信息的，好比备注，注释是给我们程序员看到，看到注释我们知道某个类是干啥的，有啥用，看到方法的注释，我们知道这个方法有什么作用需要什么参数以及参数的含义等等，那么注解嘞，注解其实是给程序看到，当程序读到注解，会从注解这里得到一些信息，知道该如何处理被该注解标记的类或方法等。 好好理解上面的，我们下面再以Spring的一个例子来加以说明。 对于Spring简单的大家都知道IOC吧，直白点就是不用你new对象，需要什么直接从Spring容器中获取，那么首先就需要把我们的bean注册到Spring容器中吧，这个一般有xml配置方式和注解方式，当然我们这里要说的是注解方式，也就是使用@+注解名称的形式，举个简单的例子，如下： 这个注解熟悉吧，它就是可以把我们的Person类注册到Spring容器中去，当然，这里就是在对这个注解的使用，我们点进去看看这个注解是怎么定义的： 这个定义我们应该已经熟悉了，对于@Component也是一个注解，它其实是最基础的把类注册到Spring容器中的注解，后来的像我们现在说的@Repositoy以及@Service和@Controller这些都是在@Component的基础上发而来。 这里就需要注意了，其实这几个注解不管是哪个，都要清楚明白的一点就是，要它们啥用，之所以需要这些注解，就是希望在哪个类上使用这些注解，就自动把这个类注册到Spring容器中，这个要比我们写xml配置简单的多，我们就在一个类上写个@Repositoy，它就被注册到Spring容器中了？ 是不是很神奇，然后看下注解的定义，也很简单，没啥东西啊，怎么就自动注册到Spring容器中了呢？ 还记得之前说的注解三大步骤嘛？首先你需要定义一个注解，然后就是使用注解，那么注解是怎么起作用的就需要有程序去读注解，这个注解就好比一个标志，一个标签一样，比如这里的@Repositoy，当一个类被这个注解标志，那么当特有的程序去读到这个注解的时候，这个程序就知道，哦，原来是要把这类注册到Spring容器中啊，那么程序怎么知道要把这个类注册到Spring容器中呢？这就是 @Repositoy 告诉它的。另外我们知道注解一般可以设置一个value属性值，可以通过反射技术拿到之类的，那么在具体的将这个类注册到Spring容器的过程中可能就会用到这个value属性值，比如设置成bean的名字。 我们一般使用了注解，在Spring配置文件中就需要配置注解的包扫描： 12&lt;context:component-scan base-package=&quot;com.ithuangqing.*&quot;/&gt;1 这个其实就是在扫描，看看哪个类上使用到了@Repositoy这些注解，扫描到的就需要特殊处理将其注册到Spring容器。想一下，这里Spring其实就会对这个标签进行解析，核心代码： 12registerBeanDefinitionParser(&quot;component-scan&quot;, new ComponentScanBeanDefinitionParser());1 然后具体的处理流程就是在ComponentScanBeanDefinitionParser处理，代码如下： 123456789101112131415@Override public BeanDefinition parse(Element element, ParserContext parserContext) &#123; String basePackage = element.getAttribute(BASE_PACKAGE_ATTRIBUTE); basePackage = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(basePackage); String[] basePackages = StringUtils.tokenizeToStringArray(basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS); // Actually scan for bean definitions and register them. ClassPathBeanDefinitionScanner scanner = configureScanner(parserContext, element); //得到扫描器 Set&lt;BeanDefinitionHolder&gt; beanDefinitions = scanner.doScan(basePackages); //扫描文件，并转化为spring bean，并注册 registerComponents(parserContext.getReaderContext(), beanDefinitions, element); //注册其他相关组件 return null; &#125;1234567891011121314 上述代码的主要作用就是扫描base-package 下的文件，然后把它转换为Spring中的bean结构，接着将其注册到容器中…… 怎么样，是不是越来越看不懂代码？很正常，这里只需要大家记住，注解是会被特有的程序去读取，然后去做相关的处理的，而这个处理逻辑，一般就比较复杂了，尤其框架中。 获取注解的属性上面讲解的关于注解是如何起作用的是很重要的，一定要理解，下面我们聊聊注解使用的最后一步：特有的程序去读取注解。 注解使用最终是需要依靠程序去读取注解，得到注解的一些信息，然后才判断接下来应该去做什么事情，那么接下来我们就要知道注解的属性值该如何获取。 其实注解的属性，用到的技术就是反射，反射是一个很重要的知识点，以后会单独写文通俗易懂的去聊一聊的。 接下来我们来看如何使用反射来获取注解的属性。，主要就是一下三个基本的方法： 123456789101112131415161718/**是否存在对应 Annotation 对象*/public boolean isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass) &#123; return GenericDeclaration.super.isAnnotationPresent(annotationClass);&#125;/**获取 Annotation 对象*/public &lt;A extends Annotation&gt; A getAnnotation(Class&lt;A&gt; annotationClass) &#123; return (A) annotationData().annotations.get(annotationClass);&#125;/**获取所有 Annotation 对象数组*/ public Annotation[] getAnnotations() &#123; return AnnotationParser.toArray(annotationData().annotations);&#125;1234567891011121314151617 然后接下来看一段简单的代码：演示利用注解获取注解属性 12345678910111213141516public class Test &#123; public static void main(String[] args) throws Exception &#123; Class&lt;Test&gt; testClass = Test.class; Method toGetString = testClass.getMethod(&quot;toGetString&quot;); //获取注解对象 Main main = toGetString.getAnnotation(Main.class); System.out.println(main.value()); &#125; @Main(&quot;这是自定义注解的value值&quot;) public static String toGetString() &#123; return &quot;&quot;; &#125;&#125;123456789101112131415 其实很简单，记住以上三个获取注解的方法，关于反射我们后面会详细聊聊。 到现在基本知道了注解需要先定义出来，然后使用，那么怎么起作用，大概就是需要一个程序去专门利用反射技术去读取注解，得到注解里面的信息然后做相应的事情。 总结到这里，关于注解的讲解其实就差不多了，也许你看了也就忘了，也许你根本就没有看完，但是我希望记住一下内容： 定义注解 使用注解 读取注解","categories":[{"name":"Java","slug":"Java","permalink":"http://example.com/categories/Java/"}],"tags":[{"name":"注解","slug":"注解","permalink":"http://example.com/tags/%E6%B3%A8%E8%A7%A3/"}]},{"title":"【HEXO】HEXO操作","slug":"【HEXO】HEXO操作","date":"2021-01-08T14:28:34.972Z","updated":"2021-11-14T09:41:51.951Z","comments":true,"path":"2021/01/08/【HEXO】HEXO操作/","link":"","permalink":"http://example.com/2021/01/08/%E3%80%90HEXO%E3%80%91HEXO%E6%93%8D%E4%BD%9C/","excerpt":"","text":"init1$ hexo init [folder] 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 new1$ hexo new [layout] &lt;title&gt; 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 1$ hexo new &quot;post title with whitespace&quot; 参数 描述 -p, --path 自定义新文章的路径 -r, --replace 如果存在同名文章，将其替换 -s, --slug 文章的 Slug，作为新文章的文件名和发布后的 URL 默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。你可以使用 --path 参数来覆盖上述行为、自行决定文件的目录： 1hexo new page --path about&#x2F;me &quot;About me&quot; 以上命令会创建一个 source/about/me.md 文件，同时 Front Matter 中的 title 为 &quot;About me&quot; 注意！title 是必须指定的！如果你这么做并不能达到你的目的： 1hexo new page --path about&#x2F;me 此时 Hexo 会创建 source/_posts/about/me.md，同时 me.md 的 Front Matter 中的 title 为 &quot;page&quot;。这是因为在上述命令中，hexo-cli 将 page 视为指定文章的标题、并采用默认的 layout。 generate1$ hexo generate 生成静态文件。 选项 描述 -d, --deploy 文件生成后立即部署网站 -w, --watch 监视文件变动 -b, --bail 生成过程中如果发生任何未处理的异常则抛出异常 -f, --force 强制重新生成文件 Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。 使用该参数的效果接近 hexo clean &amp;&amp; hexo generate -c, --concurrency 最大同时生成文件的数量，默认无限制 该命令可以简写为 1$ hexo g publish1$ hexo publish [layout] &lt;filename&gt; 发表草稿。 server1$ hexo server 启动服务器。默认情况下，访问网址为： http://localhost:4000/。 选项 描述 -p, --port 重设端口 -s, --static 只使用静态文件 -l, --log 启动日记记录，使用覆盖记录格式 deploy1$ hexo deploy 部署网站。 参数 描述 -g, --generate 部署之前预先生成静态文件 该命令可以简写为： 1$ hexo d render1$ hexo render &lt;file1&gt; [file2] ... 渲染文件。 参数 描述 -o, --output 设置输出路径 migrate1$ hexo migrate &lt;type&gt; 从其他博客系统 迁移内容。 clean1$ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。 list1$ hexo list &lt;type&gt; 列出网站资料。 version1$ hexo version 显示 Hexo 版本。 选项安全模式1$ hexo --safe 在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。 调试模式1$ hexo --debug 在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。 简洁模式1$ hexo --silent 隐藏终端信息。 自定义配置文件的路径12345# 使用 custom.yml 代替默认的 _config.yml$ hexo server --config custom.yml# 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高$ hexo generate --config custom.yml,custom2.json,custom3.yml 自定义配置文件的路径，指定这个参数后将不再使用默认的 _config.yml。你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如： 12345# 使用 custom.yml 代替默认的 _config.yml$ hexo server --config custom.yml# 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json$ hexo generate --config custom.yml,custom2.json,custom3.yml 当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 _multiconfig.yml。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。 显示草稿1$ hexo --draft 显示 source/_drafts 文件夹中的草稿文章。 自定义 CWD1$ hexo --cwd &#x2F;path&#x2F;to&#x2F;cwd 自定义当前工作目录（Current working directory）的路径。","categories":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]}],"categories":[{"name":"nginx","slug":"nginx","permalink":"http://example.com/categories/nginx/"},{"name":"Linux","slug":"Linux","permalink":"http://example.com/categories/Linux/"},{"name":"MySQL","slug":"Linux/MySQL","permalink":"http://example.com/categories/Linux/MySQL/"},{"name":"Java","slug":"Java","permalink":"http://example.com/categories/Java/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"},{"name":"nginx","slug":"nginx","permalink":"http://example.com/tags/nginx/"},{"name":"MySQL","slug":"MySQL","permalink":"http://example.com/tags/MySQL/"},{"name":"CentOS","slug":"CentOS","permalink":"http://example.com/tags/CentOS/"},{"name":"auther","slug":"auther","permalink":"http://example.com/tags/auther/"},{"name":"sudoer","slug":"sudoer","permalink":"http://example.com/tags/sudoer/"},{"name":"fireawall","slug":"fireawall","permalink":"http://example.com/tags/fireawall/"},{"name":"centos","slug":"centos","permalink":"http://example.com/tags/centos/"},{"name":"注解","slug":"注解","permalink":"http://example.com/tags/%E6%B3%A8%E8%A7%A3/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]}